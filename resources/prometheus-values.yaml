# // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# // SPDX-License-Identifier: MIT-0
alertmanager:
  enabled: false       
grafana:
  enabled: false
kubelet:
  enabled: false

prometheusOperator:
  nodeSelector:
    operational: "true"
    monitor: "true"
  livenessProbe:
    initialDelaySeconds: 30
    timeoutSeconds: 30
  readinessProbe:
    initialDelaySeconds: 30
    timeoutSeconds: 30
  admissionWebhooks:
    deployment:
      livenessProbe:
        initialDelaySeconds: 30
        timeoutSeconds: 30
      readinessProbe:
        initialDelaySeconds: 30
        timeoutSeconds: 30

prometheus-node-exporter:
  prometheus:
    monitor:
      metricRelabelings:
      - action: keep
        regex: 'node_cpu_seconds_total;idle'
        sourceLabels: [__name__, mode]

kube-state-metrics:
  prometheus:
    monitor:
      metricRelabelings:
      - action: keep
        regex: 'kube_pod_container_status_running|kube_node_status_allocatable|kube_node_status_capacity'
        sourceLabels: [__name__]

kubeApiServer:
  serviceMonitor:
    metricRelabelings:
    - action: drop
      regex: apiserver_request_duration_seconds_bucket;(0.15|0.25|0.3|0.35|0.4|0.45|0.6|0.7|0.8|0.9|1.25|1.5|1.75|2.5|3|3.5|4.5|6|7|8|9|15|25|30|50)
      sourceLabels: [__name__,le]
    - action: drop
      regex: apiserver_request_sli_duration_seconds_bucket
      sourceLabels: [__name__]
    - action: drop
      regex: apiserver_request_body_size_bytes_bucket
      sourceLabels: [__name__]
    - action: drop
      regex: etcd_request_duration_seconds_bucket;(0.15|0.25|0.3|0.35|0.4|0.45|0.6|0.7|0.8|0.9|1.25|1.5|1.75|2.5|3|3.5|4.5|6|7|8|9|15|25|30|50)
      sourceLabels: [__name__,le]

prometheus:
  serviceAccount:
    create: true
    name: amp-iamproxy-ingest-service-account
    annotations: 
      eks.amazonaws.com/role-arn: arn:aws:iam::{ACCOUNTID}:role/{LOAD_TEST_PREFIX}-prometheus-ingest
  prometheusSpec:
    additionalArgs:
      - name: storage.tsdb.min-block-duration
        value: 30m
      - name: storage.tsdb.max-block-duration
        value: 30m
    terminationGracePeriodSeconds: 90
    maximumStartupDurationSeconds: 600
    minReadySeconds: 90
    containers: 
    - name: prometheus
      startupProbe:
        failureThreshold: 30
        initialDelaySeconds: 60
      readinessProbe:
        periodSeconds: 30
        initialDelaySeconds: 60
      livenessProbe:
        periodSeconds: 30
        initialDelaySeconds: 60
      resources:
        limits:
          cpu: "4"
          memory: 80Gi
        requests:
          cpu: "1"
          memory: 15Gi
    replicas: 1
    nodeSelector:
      operational: "true"
      monitor: "true"
    # ensure one instance per node
    podAntiAffinity: hard
    # add an EBS volume per instance 
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Delete    # PVC is deleted when the StatefulSet is deleted
      whenScaled: Delete   
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi

    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    scrapeInterval: 30s
    evaluationInterval: 30s
    remoteRead:
    - url: https://aps-workspaces.{AWS_REGION}.amazonaws.com/workspaces/{WORKSPACE_ID}/api/v1/query
      readRecent: true
    remoteWrite:
    - url: https://aps-workspaces.{AWS_REGION}.amazonaws.com/workspaces/{WORKSPACE_ID}/api/v1/remote_write
      sigv4:
        region: {AWS_REGION}
      queueConfig:
        maxSamplesPerSend: 3500
        batchSendDeadline: 10s
        maxRetries: 10
        # maxBackoff: 10m
        retryOnRateLimit: true
        minShards: 100
        maxShards: 300
        capacity: 35000
      metadataConfig:
        send: false
    retention: 12h
    # retentionSize: 85GB
    scrapeTimeout: 30s
    additionalScrapeConfigs:
      # Prometheus Operator doesn't scrape metrics by default from pods or endpoints with prometheus.io/scrape: "true"
      # Hence we are adding this csutom screape config for  'kubernetes-service-endpoints' and 'kubernetes-pods'
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: service
          - source_labels: [__meta_kubernetes_service_name]
            regex: '.*node-exporter.*'
            action: drop
          - source_labels: [__meta_kubernetes_service_name]
            regex: '.*kube-dns.*'
            action: drop
          - source_labels: [__meta_kubernetes_service_name]
            regex: '.*state-metrics.*'
            action: drop

      - job_name: 'locust'
        static_configs:
          - targets: ['{LOCUST_IP_PRIV}:8000']
            labels:
              instance: 'ec2-instance'
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_ip]
            action: replace
            target_label: pod_ip
          - source_labels: [__meta_kubernetes_pod_host_ip]
            action: replace
            target_label: instance
